import type { QWElement } from '@qualweb/qw-element';
import getElementReferencedByHREFFunction from './getElementReferencedByHREF';
import videoElementHasAudioFunction from './videoElementHasAudio';
import isFocusableBrowserFunction from '../accessibilityUtils/isFocusableBrowser';
import getVideoMetadataFunction from './getVideoMetadata';
import objectElementIsNonTextFunction from './objectElementIsNonText';
import isHumanLanguageFunction from './isHumanLanguage';
import getTextSizeFunction from './getTextSize';
declare class DomUtils {
    static getVideoMetadata: typeof getVideoMetadataFunction;
    static getElementReferencedByHREF: typeof getElementReferencedByHREFFunction;
    static videoElementHasAudio: typeof videoElementHasAudioFunction;
    static isFocusableBrowser: typeof isFocusableBrowserFunction;
    static objectElementIsNonText: typeof objectElementIsNonTextFunction;
    static isHumanLanguage: typeof isHumanLanguageFunction;
    static getTextSize: typeof getTextSizeFunction;
    static isElementHidden(element: QWElement): boolean;
    static isElementHiddenByCSS(element: QWElement): boolean;
    static isElementVisible(element: QWElement): boolean;
    static elementIdIsReferenced(element: QWElement, id: string, attribute: string): boolean;
    static isElementADescendantOf(element: QWElement, names: Array<string>, roles: Array<string>): boolean;
    static isElementADescendantOfExplicitRole(element: QWElement, names: Array<string>, roles: Array<string>): boolean;
    static elementHasContent(element: QWElement, checkChildren: boolean): boolean;
    static isElementHiddenByCSSAux(element: QWElement): boolean;
    static getTrimmedText(element: QWElement): string;
}
export default DomUtils;
//# sourceMappingURL=domUtils.d.ts.map