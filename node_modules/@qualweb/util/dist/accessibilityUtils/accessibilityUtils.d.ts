import type { QWElement } from '@qualweb/qw-element';
import allowsNameFromContentFunction from './allowsNameFromContent';
import getDefaultNameFunction from './getDefaultName';
import getDisabledWidgetsFunction from './getDisabledWidgets';
import isFocusableBrowserFunction from './isFocusableBrowser';
declare class AccessibilityUtils {
    static ariaAttributesRoles: import("./ariaAttributesRoles").AriaAttributeRoles;
    static roles: import("./roles").Roles;
    static languages: {
        [lang: string]: number;
    };
    static getLinkContext(element: QWElement): string[];
    static allowsNameFromContent: typeof allowsNameFromContentFunction;
    static elementHasValidRole(element: QWElement): boolean;
    static getElementValidExplicitRole(element: QWElement): string | null;
    static getAccessibleName(element: QWElement): string | undefined;
    static getAccessibleNameRecursion(element: QWElement, recursion: boolean, isWidget: boolean): string | undefined;
    static getAccessibleNameSelector(element: QWElement): string | string[] | undefined;
    static getAccessibleNameSVG(element: QWElement): string | undefined;
    static getDefaultName: typeof getDefaultNameFunction;
    static getDisabledWidgets: typeof getDisabledWidgetsFunction;
    static isFocusableBrowser: typeof isFocusableBrowserFunction;
    static getOwnedElements(element: QWElement): Array<QWElement>;
    static getElementRole(element: QWElement): string | null;
    static getElementRoleAName(element: QWElement, aName: string | undefined): string | null;
    static isDataTable(element: QWElement): boolean;
    static isElementControl(element: QWElement): boolean;
    static getValueFromEmbeddedControl(element: QWElement): string;
    static isElementInAT(element: QWElement): boolean;
    static isElementReferencedByAriaLabel(element: QWElement): boolean;
    static isElementWidget(element: QWElement): boolean;
    static getImplicitRole(element: QWElement, accessibleName: string | undefined): string | null;
    static getOwnerElement(element: QWElement): QWElement | null;
    static isElementChildPresentationalAux(element: QWElement): boolean;
    static isElementChildPresentational(element: QWElement): boolean;
    static isElementFocusableByDefault(elementQW: QWElement): boolean;
    static isElementFocusable(element: QWElement): boolean;
    static isPartOfSequentialFocusNavigation(element: QWElement): boolean;
    static elementHasGlobalARIAPropertyOrAttribute(element: QWElement): boolean;
    static getAriaOwner(element: QWElement): QWElement | null;
    static landmarkIsTopLevel(element: QWElement): boolean;
}
export default AccessibilityUtils;
//# sourceMappingURL=accessibilityUtils.d.ts.map