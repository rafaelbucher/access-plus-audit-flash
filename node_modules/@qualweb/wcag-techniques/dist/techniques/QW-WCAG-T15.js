"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QW_WCAG_T15 = void 0;
const applicability_1 = require("@qualweb/util/applicability");
const evaluation_1 = require("@qualweb/core/evaluation");
const Technique_object_1 = require("../lib/Technique.object");
class QW_WCAG_T15 extends Technique_object_1.Technique {
    constructor() {
        super(...arguments);
        this.relNavigationValues = [
            'alternate',
            'author',
            'canonical',
            'help',
            'license',
            'manifest',
            'next',
            'prev',
            'search'
        ];
    }
    execute(element) {
        const test = new evaluation_1.Test();
        const parent = element.getElementParent();
        if (parent) {
            const parentName = parent.getElementTagName();
            if (parentName !== 'head') {
                test.verdict = evaluation_1.Verdict.WARNING;
                test.description = `The element is not contained in the head element. Verify if this link is used for navigation, and if it is, it must be inside the <head>`;
                test.resultCode = 'W1';
            }
            else if (!element.elementHasAttributes()) {
                test.verdict = evaluation_1.Verdict.INAPPLICABLE;
                test.description = `The element doesn't contain a rel or an href attribute`;
                test.resultCode = 'RC2';
            }
            else {
                const rel = element.getElementAttribute('rel');
                const href = element.getElementAttribute('href');
                const relForNavigation = rel && this.relNavigationValues.includes(rel.toLowerCase());
                if (!relForNavigation) {
                    test.verdict = evaluation_1.Verdict.INAPPLICABLE;
                    test.resultCode = 'I2';
                }
                else if (!href) {
                    test.verdict = evaluation_1.Verdict.FAILED;
                    test.resultCode = 'F1';
                }
                else {
                    test.verdict = evaluation_1.Verdict.PASSED;
                    test.resultCode = 'P1';
                }
            }
            test.addElement(element);
            this.addTestResult(test);
        }
    }
}
exports.QW_WCAG_T15 = QW_WCAG_T15;
__decorate([
    applicability_1.ElementExists,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function]),
    __metadata("design:returntype", void 0)
], QW_WCAG_T15.prototype, "execute", null);
