"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QW_WCAG_T29 = void 0;
const applicability_1 = require("@qualweb/util/applicability");
const evaluation_1 = require("@qualweb/core/evaluation");
const Technique_object_1 = require("../lib/Technique.object");
class QW_WCAG_T29 extends Technique_object_1.Technique {
    execute(element) {
        var _a;
        if (element.getElementTagName() === 'style') {
            const sheet = element.getElementProperty('sheet');
            for (const rule of sheet.cssRules || []) {
                const style = (_a = rule === null || rule === void 0 ? void 0 : rule.style) === null || _a === void 0 ? void 0 : _a.cssText;
                if (style) {
                    this.checkCssProperty(style, element);
                }
            }
        }
        else {
            const style = element.getElementAttribute('style');
            if (style) {
                this.checkCssProperty(style, element);
            }
        }
    }
    checkCssProperty(style, element) {
        const properties = style.split(';').filter((p) => p.trim() !== '') || [style];
        for (const property of properties) {
            if (property.includes('text-align')) {
                const textAlign = property.split(':')[1];
                const isJustified = textAlign.includes('justify');
                const test = new evaluation_1.Test();
                if (!isJustified) {
                    test.verdict = evaluation_1.Verdict.PASSED;
                    test.resultCode = 'P1';
                }
                else {
                    test.verdict = evaluation_1.Verdict.FAILED;
                    test.resultCode = 'F1';
                    test.addElement(element);
                    test.attributes.push(property);
                }
                this.addTestResult(test);
            }
        }
    }
}
exports.QW_WCAG_T29 = QW_WCAG_T29;
__decorate([
    applicability_1.ElementExists,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function]),
    __metadata("design:returntype", void 0)
], QW_WCAG_T29.prototype, "execute", null);
