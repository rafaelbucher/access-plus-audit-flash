"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QW_WCAG_T14 = void 0;
const applicability_1 = require("@qualweb/util/applicability");
const evaluation_1 = require("@qualweb/core/evaluation");
const Technique_object_1 = require("../lib/Technique.object");
const accessibilityUtils_1 = __importDefault(require("@qualweb/util/accessibilityUtils"));
class QW_WCAG_T14 extends Technique_object_1.Technique {
    execute(element) {
        const test = new evaluation_1.Test();
        const hasIds = element.getElements('[id]');
        const hasHeaders = element.getElements('[headers]');
        if (!window.AccessibilityUtils.isDataTable(element)) {
            if (hasIds.length > 0 || hasHeaders.length > 0) {
                test.verdict = evaluation_1.Verdict.FAILED;
                test.resultCode = 'F1';
            }
            else {
                test.verdict = evaluation_1.Verdict.INAPPLICABLE;
                test.resultCode = 'I2';
            }
        }
        else {
            if (doesTableHaveDuplicateIds(element)) {
                test.verdict = evaluation_1.Verdict.FAILED;
                test.resultCode = 'F2';
            }
            else if (hasHeaders.length <= 0) {
                test.verdict = evaluation_1.Verdict.INAPPLICABLE;
                test.resultCode = 'I3';
            }
            else {
                const headersElements = element.getElements('[headers]');
                let headersMatchId = true;
                for (const headerElem of headersElements || []) {
                    if (headersMatchId) {
                        headersMatchId = doesHeadersMatchId(element, headerElem.getElementAttribute('headers'));
                    }
                }
                if (headersMatchId) {
                    test.verdict = evaluation_1.Verdict.PASSED;
                    test.resultCode = 'P1';
                }
                else {
                    test.verdict = evaluation_1.Verdict.FAILED;
                    test.resultCode = 'F3';
                }
            }
        }
        test.addElement(element);
        this.addTestResult(test);
    }
}
exports.QW_WCAG_T14 = QW_WCAG_T14;
__decorate([
    applicability_1.ElementExists,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function]),
    __metadata("design:returntype", void 0)
], QW_WCAG_T14.prototype, "execute", null);
function doesTableHaveDuplicateIds(table) {
    const elementsId = table.getElements('[id]');
    let duplicate = false;
    let counter;
    for (const elementId of elementsId || []) {
        counter = 0;
        for (const elementId2 of elementsId || []) {
            if (elementId.getElementAttribute('id') === elementId2.getElementAttribute('id')) {
                counter++;
            }
            if (counter > 1) {
                duplicate = true;
                break;
            }
        }
    }
    return duplicate;
}
function doesHeadersMatchId(table, headers) {
    let outcome = false;
    let result = 0;
    if (headers && headers.trim() !== '') {
        const splitHeaders = headers.split(' ');
        for (const header of splitHeaders || []) {
            const matchingIdElem = table.getElement('[id="' + header + '"]');
            if (matchingIdElem !== null) {
                const role = accessibilityUtils_1.default.getElementRole(matchingIdElem);
                if (role === "columnheader" || role === "rowheader") {
                    result++;
                }
            }
        }
        if (splitHeaders.length === result) {
            outcome = true;
        }
    }
    else {
        outcome = true;
    }
    return outcome;
}
