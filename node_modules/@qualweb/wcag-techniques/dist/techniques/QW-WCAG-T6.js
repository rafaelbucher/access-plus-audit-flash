"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QW_WCAG_T6 = void 0;
const applicability_1 = require("@qualweb/util/applicability");
const evaluation_1 = require("@qualweb/core/evaluation");
const Technique_object_1 = require("../lib/Technique.object");
class QW_WCAG_T6 extends Technique_object_1.Technique {
    execute(element) {
        const test = new evaluation_1.Test();
        const hasOnkeypress = element.elementHasAttribute('onkeypress');
        const hasOnkeydown = element.elementHasAttribute('onkeydown');
        const hasOnkeyup = element.elementHasAttribute('onkeyup');
        if (!hasOnkeypress && !hasOnkeydown && !hasOnkeyup) {
            test.verdict = evaluation_1.Verdict.FAILED;
            test.description = `The mouse event attribute doesn't have a keyboard equivalent.`;
            test.resultCode = 'RC3';
        }
        else {
            const keyPress = element.getElementAttribute('onkeypress');
            const keyDown = element.getElementAttribute('onkeydown');
            const keyUp = element.getElementAttribute('onkeyup');
            const attrs = [
                'onmousedown',
                'onmouseup',
                'onclick',
                'onmouseover',
                'onmouseout',
                'onmouseenter',
                'onmouseleave',
                'onmousemove',
                'ondblclick',
                'onwheel'
            ];
            for (const attr of attrs) {
                if (element.elementHasAttribute(attr)) {
                    const event = element.getElementAttribute(attr);
                    if (event === keyPress || event === keyDown || event === keyUp) {
                        this.fillPassedResult(test);
                    }
                    else {
                        this.fillWarningResult(test);
                    }
                }
            }
        }
        test.addElement(element);
        this.addTestResult(test);
    }
    fillPassedResult(test) {
        if (test.verdict === 'inapplicable') {
            test.verdict = evaluation_1.Verdict.PASSED;
            test.resultCode = 'P1';
        }
    }
    fillWarningResult(test) {
        test.verdict = evaluation_1.Verdict.WARNING;
        test.resultCode = 'W1';
    }
}
exports.QW_WCAG_T6 = QW_WCAG_T6;
__decorate([
    applicability_1.ElementExists,
    applicability_1.ElementHasAttributes,
    applicability_1.ElementIsVisible,
    applicability_1.ElementIsNotWidget,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function]),
    __metadata("design:returntype", void 0)
], QW_WCAG_T6.prototype, "execute", null);
