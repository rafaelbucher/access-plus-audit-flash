"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QW_WCAG_T34 = void 0;
const applicability_1 = require("@qualweb/util/applicability");
const evaluation_1 = require("@qualweb/core/evaluation");
const Technique_object_1 = require("../lib/Technique.object");
class QW_WCAG_T34 extends Technique_object_1.Technique {
    execute(element) {
        const test = new evaluation_1.Test();
        const correctElemments = this.onlyCorrectElementTypes(element);
        const dtToDDOrder = this.checkDtToDDOrder(element);
        if (!correctElemments) {
            test.verdict = evaluation_1.Verdict.FAILED;
            test.resultCode = 'F1';
        }
        else if (!dtToDDOrder) {
            test.verdict = evaluation_1.Verdict.FAILED;
            test.resultCode = 'F2';
        }
        else {
            test.verdict = evaluation_1.Verdict.PASSED;
            test.resultCode = 'P1';
        }
        test.addElement(element);
        this.addTestResult(test);
    }
    onlyCorrectElementTypes(element) {
        const children = element.getElementChildren();
        return children.reduce((acc, element) => {
            const name = element.getElementTagName();
            return acc && ['dt', 'dd', 'script', 'template', 'div'].includes(name);
        }, true);
    }
    checkDtToDDOrder(element) {
        const dList = element.getElements('dt,dd');
        return dList.reduce((acc, element) => {
            const tagName = element.getElementTagName();
            let result;
            if (tagName === 'dt') {
                result = this.hasDD(element);
            }
            else {
                result = this.hasDT(element);
            }
            return acc && result;
        }, true);
    }
    hasDD(element) {
        const nextSibling = element.getElementNextSibling();
        let result;
        if (!nextSibling) {
            result = false;
        }
        else if (nextSibling.getElementTagName() === 'dd') {
            result = true;
        }
        else {
            result = this.hasDD(nextSibling);
        }
        return result;
    }
    hasDT(element) {
        const previousSibling = element.getElementPreviousSibling();
        let result;
        if (!previousSibling) {
            result = false;
        }
        else if (previousSibling.getElementTagName() === 'dt') {
            result = true;
        }
        else {
            result = this.hasDT(previousSibling);
        }
        return result;
    }
}
exports.QW_WCAG_T34 = QW_WCAG_T34;
__decorate([
    applicability_1.ElementExists,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function]),
    __metadata("design:returntype", void 0)
], QW_WCAG_T34.prototype, "execute", null);
