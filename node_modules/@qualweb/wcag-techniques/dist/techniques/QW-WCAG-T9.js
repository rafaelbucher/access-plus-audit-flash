"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QW_WCAG_T9 = void 0;
const applicability_1 = require("@qualweb/util/applicability");
const evaluation_1 = require("@qualweb/core/evaluation");
const Technique_object_1 = require("../lib/Technique.object");
class QW_WCAG_T9 extends Technique_object_1.Technique {
    execute(element) {
        const headingList = window.qwPage.getElements('h1, h2, h3, h4, h5, h6, [role="heading"]');
        if (headingList.length === 0) {
            return;
        }
        const headingObjectList = [];
        for (const heading of headingList) {
            const tagName = heading.getElementTagName();
            let level;
            if (tagName.includes('h')) {
                level = +tagName.replace('h', '');
            }
            else {
                const ariaLevel = heading.getElementAttribute('aria-level');
                level = ariaLevel ? +ariaLevel : 1;
            }
            const selector = heading.getElementSelector();
            headingObjectList.push({ level, selector, heading });
        }
        const orderErrors = [];
        for (const [i, element] of headingObjectList.entries()) {
            const nextIndex = i + 1;
            if (nextIndex < headingObjectList.length) {
                const level = element.level;
                const nextElement = headingObjectList[nextIndex];
                const nextLevel = nextElement.level;
                const levelDif = nextLevel - level;
                if (levelDif > 1 && !orderErrors.includes(element.heading)) {
                    orderErrors.push(element.heading);
                }
            }
        }
        let test = new evaluation_1.Test();
        if (orderErrors.length === 0) {
            test.verdict = evaluation_1.Verdict.WARNING;
            test.resultCode = 'W1';
            test.addElement(element);
            this.addTestResult(test);
        }
        else {
            for (const error of orderErrors) {
                test.verdict = evaluation_1.Verdict.FAILED;
                test.resultCode = 'F1';
                test.addElement(error);
                this.addTestResult(test);
                test = new evaluation_1.Test();
            }
        }
    }
}
exports.QW_WCAG_T9 = QW_WCAG_T9;
__decorate([
    applicability_1.ElementExists,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function]),
    __metadata("design:returntype", void 0)
], QW_WCAG_T9.prototype, "execute", null);
