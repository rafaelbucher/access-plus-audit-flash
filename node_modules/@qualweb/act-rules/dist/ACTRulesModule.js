"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ACTRulesModule = void 0;
const evaluation_1 = require("@qualweb/core/evaluation");
class ACTRulesModule extends evaluation_1.ExecutableModuleContext {
    constructor() {
        super(...arguments);
        this.name = evaluation_1.ModuleType.ACT_RULES;
    }
    getModulePackage() {
        return '@qualweb/act-rules';
    }
    runModule(page, options, translate, data) {
        return __awaiter(this, void 0, void 0, function* () {
            yield page.evaluate((translate, options, data) => {
                window.act = new ACTRulesRunner(options, translate).configure(options).test(data);
            }, translate, options, data);
            if (this.testSpecialCases(options)) {
                const viewport = page.getViewport();
                yield page.setViewport({
                    resolution: {
                        width: 640,
                        height: 512
                    },
                    mobile: viewport === null || viewport === void 0 ? void 0 : viewport.isMobile,
                    landscape: viewport === null || viewport === void 0 ? void 0 : viewport.isLandscape,
                    touch: viewport === null || viewport === void 0 ? void 0 : viewport.hasTouch
                });
                yield page.evaluate(() => {
                    var _a, _b;
                    (_b = (_a = window.act).testSpecial) === null || _b === void 0 ? void 0 : _b.call(_a);
                });
                if (viewport) {
                    yield page.setViewport({
                        resolution: {
                            width: viewport.width,
                            height: viewport.height
                        },
                        mobile: viewport === null || viewport === void 0 ? void 0 : viewport.isMobile,
                        landscape: viewport === null || viewport === void 0 ? void 0 : viewport.isLandscape,
                        touch: viewport === null || viewport === void 0 ? void 0 : viewport.hasTouch
                    });
                }
            }
            return page.evaluate(() => {
                return window.act.getReport();
            });
        });
    }
    testSpecialCases(options) {
        return (!options ||
            ((!options.include || options.include.includes('QW-ACT-R40') || options.include.includes('59br37')) &&
                (!options.exclude || !options.exclude.includes('QW-ACT-R40') || !options.exclude.includes('59br37'))));
    }
}
exports.ACTRulesModule = ACTRulesModule;
