"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QW_ACT_R30 = void 0;
const applicability_1 = require("@qualweb/util/applicability");
const evaluation_1 = require("@qualweb/core/evaluation");
const AtomicRule_object_1 = require("../lib/AtomicRule.object");
class QW_ACT_R30 extends AtomicRule_object_1.AtomicRule {
    execute(element) {
        const test = new evaluation_1.Test();
        const accessibleName = window.AccessibilityUtils.getAccessibleName(element);
        const elementText = window.DomUtils.getTrimmedText(element);
        const isIconValue = this.isIcon(elementText, accessibleName, element);
        if (accessibleName === undefined) {
            test.verdict = evaluation_1.Verdict.FAILED;
            test.resultCode = 'F1';
        }
        else if (elementText === undefined || elementText === '') {
            test.verdict = evaluation_1.Verdict.INAPPLICABLE;
            test.resultCode = 'I1';
        }
        else if (!!elementText && (isIconValue || this.includesText(accessibleName, elementText))) {
            test.verdict = evaluation_1.Verdict.PASSED;
            test.resultCode = 'P1';
        }
        else {
            test.verdict = evaluation_1.Verdict.FAILED;
            test.resultCode = 'F2';
        }
        test.addElement(element, true, false, true);
        this.addTestResult(test);
    }
    isIcon(elementText, accessibleName, element) {
        const iconMap = ['i', 'x'];
        const fontStyle = element.getElementStyleProperty('font-family', null);
        return !!accessibleName && (iconMap.includes(elementText.toLowerCase()) || fontStyle.includes('Material Icons'));
    }
    includesText(accessibleName, elementText) {
        accessibleName = accessibleName
            .toLowerCase()
            .trim()
            .replace(/\r?\n|\r|[^\w\s-]+/g, '')
            .replace(/s+/g, ' ');
        elementText = elementText
            .toLowerCase()
            .trim()
            .replace(/\r?\n|\r|[^\w\s-]+/g, '')
            .replace(/s+/g, ' ');
        return accessibleName.includes(elementText);
    }
}
exports.QW_ACT_R30 = QW_ACT_R30;
__decorate([
    applicability_1.ElementExists,
    applicability_1.ElementIsVisible,
    applicability_1.ElementIsWidget,
    applicability_1.ElementAllowsNameFromContent,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function]),
    __metadata("design:returntype", void 0)
], QW_ACT_R30.prototype, "execute", null);
