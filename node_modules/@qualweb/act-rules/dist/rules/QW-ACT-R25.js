"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QW_ACT_R25 = void 0;
const applicability_1 = require("@qualweb/util/applicability");
const evaluation_1 = require("@qualweb/core/evaluation");
const AtomicRule_object_1 = require("../lib/AtomicRule.object");
class QW_ACT_R25 extends AtomicRule_object_1.AtomicRule {
    execute(element) {
        var _a, _b, _c, _d, _e, _f;
        const ariaAttributesRoles = window.AccessibilityUtils.ariaAttributesRoles;
        const roles = window.AccessibilityUtils.roles;
        let ariaSelector = '';
        for (const ariaAttrib of Object.keys(ariaAttributesRoles) || []) {
            ariaSelector = ariaSelector.concat('[', ariaAttrib, '], ');
        }
        ariaSelector = ariaSelector.substring(0, ariaSelector.length - 2);
        const elementsWithAriaAttribs = element.getElements(ariaSelector);
        const keys = Object.keys(ariaAttributesRoles);
        for (const elem of elementsWithAriaAttribs !== null && elementsWithAriaAttribs !== void 0 ? elementsWithAriaAttribs : []) {
            const isInAT = window.AccessibilityUtils.isElementInAT(elem);
            if (isInAT) {
                const attrs = elem.getElementAttributesName();
                for (const attr of attrs !== null && attrs !== void 0 ? attrs : []) {
                    if (attr && keys.includes(attr)) {
                        const test = new evaluation_1.Test();
                        const role = window.AccessibilityUtils.getElementRole(elem);
                        if ((ariaAttributesRoles[attr]['global'] === 'yes' &&
                            !(role !== null &&
                                !!roles[role] &&
                                !!roles[role]['prohibitedAria'] &&
                                ((_b = (_a = roles[role]) === null || _a === void 0 ? void 0 : _a.prohibitedAria) === null || _b === void 0 ? void 0 : _b.includes(attr)))) ||
                            (role !== null &&
                                !!roles[role] &&
                                ((!!roles[role]['requiredAria'] && ((_d = (_c = roles[role]) === null || _c === void 0 ? void 0 : _c.requiredAria) === null || _d === void 0 ? void 0 : _d.includes(attr))) ||
                                    (roles[role]['supportedAria'] && ((_f = (_e = roles[role]) === null || _e === void 0 ? void 0 : _e.supportedAria) === null || _f === void 0 ? void 0 : _f.includes(attr)))))) {
                            test.verdict = evaluation_1.Verdict.PASSED;
                            test.resultCode = 'P1';
                        }
                        else {
                            test.verdict = evaluation_1.Verdict.FAILED;
                            test.resultCode = 'F1';
                        }
                        test.description = this.translate(test.resultCode, { attr, role: role !== null && role !== void 0 ? role : '' });
                        test.addElement(elem);
                        this.addTestResult(test);
                    }
                }
            }
        }
    }
}
exports.QW_ACT_R25 = QW_ACT_R25;
__decorate([
    applicability_1.ElementExists,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function]),
    __metadata("design:returntype", void 0)
], QW_ACT_R25.prototype, "execute", null);
