"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QW_ACT_R38 = void 0;
const applicability_1 = require("@qualweb/util/applicability");
const evaluation_1 = require("@qualweb/core/evaluation");
const AtomicRule_object_1 = require("../lib/AtomicRule.object");
class QW_ACT_R38 extends AtomicRule_object_1.AtomicRule {
    execute(element) {
        const rolesJSON = window.AccessibilityUtils.roles;
        const test = new evaluation_1.Test();
        const explicitRole = element.getElementAttribute('role');
        const implicitRole = window.AccessibilityUtils.getImplicitRole(element, '');
        const ariaBusy = this.isElementADescendantOfAriaBusy(element) || element.getElementAttribute('aria-busy');
        if (explicitRole !== null && explicitRole !== implicitRole && explicitRole !== 'combobox' && !ariaBusy) {
            const result = this.checkOwnedElementsRole(rolesJSON[explicitRole]['requiredOwnedElements'], window.AccessibilityUtils.getOwnedElements(element));
            if (result) {
                test.verdict = evaluation_1.Verdict.PASSED;
                test.resultCode = 'P1';
            }
            else {
                test.verdict = evaluation_1.Verdict.FAILED;
                test.resultCode = 'F1';
            }
            test.addElement(element);
            this.addTestResult(test);
        }
    }
    checkOwnedElementsRole(ownedRoles, elements) {
        if ((ownedRoles === null || ownedRoles === void 0 ? void 0 : ownedRoles.length) === 0)
            return true;
        const rolesJSON = window.AccessibilityUtils.roles;
        let onlyOwnedRoles = true;
        let hasOneOwnedRole = false;
        let i = 0;
        let hasOwnedRole, currentElement;
        while (i < elements.length) {
            hasOwnedRole = false;
            currentElement = elements[i];
            const role = window.AccessibilityUtils.getElementRole(currentElement);
            if (!role || role === 'none') {
                break;
            }
            if (role.includes('group')) {
                const roles = rolesJSON[role]['requiredOwnedElements'];
                if (roles) {
                    roles.push(...(ownedRoles !== null && ownedRoles !== void 0 ? ownedRoles : []));
                    hasOwnedRole =
                        (ownedRoles === null || ownedRoles === void 0 ? void 0 : ownedRoles.includes(role)) &&
                            this.checkOwnedElementsRole(roles, window.AccessibilityUtils.getOwnedElements(currentElement));
                }
            }
            else {
                hasOwnedRole =
                    (ownedRoles === null || ownedRoles === void 0 ? void 0 : ownedRoles.includes(role)) &&
                        this.checkOwnedElementsRole(rolesJSON[role]['requiredOwnedElements'], window.AccessibilityUtils.getOwnedElements(currentElement));
            }
            onlyOwnedRoles = onlyOwnedRoles && !!hasOwnedRole;
            if (!hasOneOwnedRole)
                hasOneOwnedRole = !!hasOwnedRole;
            i++;
        }
        return hasOneOwnedRole && onlyOwnedRoles;
    }
    isElementADescendantOfAriaBusy(element) {
        const parent = element.getElementParent();
        let result = false;
        if (parent !== null) {
            const inAt = window.AccessibilityUtils.isElementInAT(parent);
            if (inAt) {
                result = !!parent.getElementAttribute('aria-busy');
            }
            if (!result) {
                return this.isElementADescendantOfAriaBusy(parent);
            }
            else {
                return result;
            }
        }
        else {
            return result;
        }
    }
}
exports.QW_ACT_R38 = QW_ACT_R38;
__decorate([
    applicability_1.ElementExists,
    applicability_1.ElementIsInAccessibilityTree,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function]),
    __metadata("design:returntype", void 0)
], QW_ACT_R38.prototype, "execute", null);
