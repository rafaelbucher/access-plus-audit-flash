"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QW_ACT_R71 = void 0;
const applicability_1 = require("@qualweb/util/applicability");
const evaluation_1 = require("@qualweb/core/evaluation");
const AtomicRule_object_1 = require("../lib/AtomicRule.object");
class QW_ACT_R71 extends AtomicRule_object_1.AtomicRule {
    execute(element) {
        const content = element.getElementAttribute('content');
        if (this.rule.metadata.passed + this.rule.metadata.failed > 0) {
            return;
        }
        let n = -1;
        const indexOf = content.indexOf(';');
        if (indexOf === -1) {
            if (this.checkIfIsNumber(content) && Number.isInteger(parseInt(content, 0))) {
                n = Number(content);
            }
        }
        else {
            const split = content.split(';');
            if (split.length === 2 &&
                split[0].trim() !== '' &&
                split[1].trim() !== '' &&
                this.checkIfIsNumber(split[0]) &&
                Number.isInteger(parseInt(split[0], 0))) {
                n = Number(split[0]);
            }
        }
        if (n >= 0) {
            const test = new evaluation_1.Test();
            if (n === 0) {
                test.verdict = evaluation_1.Verdict.PASSED;
                test.resultCode = 'P1';
            }
            else {
                test.verdict = evaluation_1.Verdict.FAILED;
                if (indexOf === -1) {
                    test.description = this.translate('F1', { seconds: n });
                    test.resultCode = 'F1';
                }
                else {
                    test.description = this.translate('F2', { seconds: n });
                    test.resultCode = 'F2';
                }
            }
            test.addElement(element);
            this.addTestResult(test);
        }
    }
    checkIfIsNumber(num) {
        let success = true;
        for (const n of num || []) {
            if (isNaN(parseInt(n, 0))) {
                success = false;
                break;
            }
        }
        return success;
    }
}
exports.QW_ACT_R71 = QW_ACT_R71;
__decorate([
    applicability_1.ElementExists,
    (0, applicability_1.ElementHasAttribute)('content'),
    (0, applicability_1.ElementHasNonEmptyAttribute)('content'),
    (0, applicability_1.ElementHasAttribute)('http-equiv'),
    (0, applicability_1.ElementHasNonEmptyAttribute)('http-equiv'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function]),
    __metadata("design:returntype", void 0)
], QW_ACT_R71.prototype, "execute", null);
