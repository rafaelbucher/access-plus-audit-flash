"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QW_ACT_R36 = void 0;
const applicability_1 = require("@qualweb/util/applicability");
const evaluation_1 = require("@qualweb/core/evaluation");
const AtomicRule_object_1 = require("../lib/AtomicRule.object");
class QW_ACT_R36 extends AtomicRule_object_1.AtomicRule {
    execute(element) {
        const test = new evaluation_1.Test();
        const parentTableElem = getFirstAncestorElementByNameOrRoles(element, ['table'], []);
        if (parentTableElem !== null) {
            const role = window.AccessibilityUtils.getElementRole(parentTableElem);
            const applicableRoles = ['table', 'grid', 'treegrid'];
            if (role !== null && !applicableRoles.includes(role)) {
                test.verdict = evaluation_1.Verdict.INAPPLICABLE;
                test.resultCode = 'I1';
            }
            else {
                const isInAT = window.AccessibilityUtils.isElementInAT(parentTableElem);
                if (isInAT) {
                    const isVisible = window.DomUtils.isElementVisible(parentTableElem);
                    if (isVisible) {
                        const headerAttributes = [];
                        const elementHeaders = element.getElementAttribute('headers');
                        const headers = (elementHeaders ? elementHeaders : '').split(' ');
                        for (const header of headers) {
                            if (headerAttributes.indexOf(header) < 0) {
                                headerAttributes.push(header);
                            }
                        }
                        let i = 0;
                        let idElem, idElemRole;
                        while (test.verdict !== 'failed' && i < headerAttributes.length) {
                            idElem = getElementByIdInElement(parentTableElem, headerAttributes[i]);
                            if (idElem === null) {
                                test.verdict = evaluation_1.Verdict.FAILED;
                                test.description = this.translate('F1', { attr: headerAttributes[i] });
                                test.resultCode = 'F1';
                            }
                            else {
                                idElemRole = window.AccessibilityUtils.getElementRole(idElem);
                                if (idElemRole !== 'rowheader' && idElemRole !== 'columnheader') {
                                    test.verdict = evaluation_1.Verdict.FAILED;
                                    test.description = this.translate('F2', { attr: headerAttributes[i] });
                                    test.resultCode = 'F2';
                                }
                            }
                            i++;
                        }
                        if (test.verdict !== 'failed') {
                            test.verdict = evaluation_1.Verdict.PASSED;
                            test.resultCode = 'P1';
                        }
                        test.addElement(element, true, true);
                        this.addTestResult(test);
                    }
                }
            }
        }
    }
}
exports.QW_ACT_R36 = QW_ACT_R36;
__decorate([
    applicability_1.ElementExists,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function]),
    __metadata("design:returntype", void 0)
], QW_ACT_R36.prototype, "execute", null);
function getFirstAncestorElementByNameOrRoles(element, names, roles) {
    const parent = element.getElementParent();
    let result = false;
    let sameRole = false, sameName = false;
    if (parent !== null) {
        const parentName = parent.getElementTagName();
        const parentRole = window.AccessibilityUtils.getElementRole(parent);
        if (parentName !== null) {
            sameName = names.includes(parentName);
        }
        if (parentRole !== null) {
            sameRole = roles.includes(parentRole);
        }
        result = sameName || sameRole;
        if (!result) {
            return getFirstAncestorElementByNameOrRoles(parent, names, roles);
        }
        else {
            return parent;
        }
    }
    else {
        return null;
    }
}
function getElementByIdInElement(element, id) {
    if (!id) {
        return null;
    }
    return element.getElement(`[id="${id}"]`);
}
