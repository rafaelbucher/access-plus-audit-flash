"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QW_ACT_R14 = void 0;
const applicability_1 = require("@qualweb/util/applicability");
const evaluation_1 = require("@qualweb/core/evaluation");
const AtomicRule_object_1 = require("../lib/AtomicRule.object");
class QW_ACT_R14 extends AtomicRule_object_1.AtomicRule {
    execute(element) {
        const test = new evaluation_1.Test();
        const content = element.getElementAttribute('content');
        let maximumScale = '';
        let userScalable = '';
        const contentValues = content.split(',');
        if (contentValues[0].trim().length > 0) {
            for (const valueItem of contentValues !== null && contentValues !== void 0 ? contentValues : []) {
                const value = valueItem.trim().split('=');
                if (value[0] === 'maximum-scale') {
                    maximumScale = value[1];
                }
                else if (value[0] === 'user-scalable') {
                    userScalable = value[1];
                }
            }
        }
        if (!maximumScale && !userScalable) {
            test.verdict = evaluation_1.Verdict.INAPPLICABLE;
            test.resultCode = 'I1';
        }
        else if (!maximumScale &&
            (!userScalable ||
                userScalable === 'yes' ||
                userScalable === 'device-width' ||
                userScalable === 'device-height' ||
                parseInt(userScalable) < -1 ||
                parseInt(userScalable) > 1)) {
            test.verdict = evaluation_1.Verdict.PASSED;
            test.resultCode = 'P1';
        }
        else if (!userScalable &&
            (!maximumScale ||
                maximumScale === 'device-width' ||
                maximumScale === 'device-height' ||
                parseInt(maximumScale) < 0 ||
                parseInt(maximumScale) >= 2)) {
            test.verdict = evaluation_1.Verdict.PASSED;
            test.resultCode = 'P2';
        }
        else {
            test.verdict = evaluation_1.Verdict.FAILED;
            test.resultCode = 'F1';
        }
        test.addElement(element);
        this.addTestResult(test);
    }
}
exports.QW_ACT_R14 = QW_ACT_R14;
__decorate([
    applicability_1.ElementExists,
    (0, applicability_1.ElementHasAttribute)('content'),
    (0, applicability_1.ElementHasAttributeValue)('name', 'viewport'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function]),
    __metadata("design:returntype", void 0)
], QW_ACT_R14.prototype, "execute", null);
