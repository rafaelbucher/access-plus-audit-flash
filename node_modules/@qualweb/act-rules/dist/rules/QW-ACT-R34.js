"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QW_ACT_R34 = void 0;
const applicability_1 = require("@qualweb/util/applicability");
const evaluation_1 = require("@qualweb/core/evaluation");
const AtomicRule_object_1 = require("../lib/AtomicRule.object");
class QW_ACT_R34 extends AtomicRule_object_1.AtomicRule {
    execute(element) {
        const ariaJSON = window.AccessibilityUtils.ariaAttributesRoles;
        const rolesJSON = window.AccessibilityUtils.roles;
        let ariaSelector = '';
        for (const ariaAttrib of Object.keys(ariaJSON) || []) {
            ariaSelector = ariaSelector.concat('[', ariaAttrib, '], ');
        }
        ariaSelector = ariaSelector.substring(0, ariaSelector.length - 2);
        const elementsWithAriaAttribs = element.getElements(ariaSelector);
        for (const elem of elementsWithAriaAttribs || []) {
            const isInAT = window.AccessibilityUtils.isElementInAT(elem);
            let elemAttribs = elem.getElementAttributesName();
            elemAttribs = elemAttribs.filter((elem) => elem.startsWith('ar'));
            for (const attrib of elemAttribs !== null && elemAttribs !== void 0 ? elemAttribs : []) {
                if (attrib in ariaJSON) {
                    const values = ariaJSON[attrib]['values'];
                    const attrValue = elem.getElementAttribute(attrib);
                    const typeValue = ariaJSON[attrib]['typeValue'];
                    let result = false;
                    if (attrValue && isInAT) {
                        if (typeValue === 'value') {
                            result = values.includes(attrValue);
                        }
                        else if (typeValue === 'string') {
                            result = values === '';
                        }
                        else if (typeValue === 'number') {
                            result = !isNaN(Number(attrValue));
                        }
                        else if (typeValue === 'integer') {
                            const regex = new RegExp('^[0-9]+$');
                            result = regex.test(attrValue);
                        }
                        else if (typeValue === 'list') {
                            const list = attrValue.split(' ');
                            let passed = true;
                            for (const value of list || []) {
                                if (passed) {
                                    result = values.includes(value);
                                    passed = result;
                                }
                            }
                        }
                        else {
                            const role = window.AccessibilityUtils.getElementRole(elem);
                            let requiredAriaList;
                            if (role !== null && !!rolesJSON[role]) {
                                requiredAriaList = rolesJSON[role]['requiredAria'];
                            }
                            if (typeValue === 'id') {
                                const isRequired = requiredAriaList && requiredAriaList.includes(attrib);
                                if (isRequired)
                                    result = window.qwPage.getElement('#' + attrValue) !== null;
                                else
                                    result = !attrValue.includes(' ');
                            }
                            else {
                                const list = attrValue.split(' ');
                                const isRequired = requiredAriaList && requiredAriaList.includes(attrib);
                                if (isRequired) {
                                    for (const id of list || []) {
                                        if (!result) {
                                            result = window.qwPage.getElement('#' + CSS.escape(id)) !== null;
                                        }
                                    }
                                }
                                else {
                                    result = true;
                                }
                            }
                        }
                        const test = new evaluation_1.Test();
                        if (result) {
                            test.verdict = evaluation_1.Verdict.PASSED;
                            test.resultCode = 'P1';
                        }
                        else {
                            test.verdict = evaluation_1.Verdict.FAILED;
                            test.resultCode = 'F1';
                        }
                        test.description = this.translate(test.resultCode, { attr: attrib });
                        test.addElement(elem);
                        this.addTestResult(test);
                    }
                }
            }
        }
    }
}
exports.QW_ACT_R34 = QW_ACT_R34;
__decorate([
    applicability_1.ElementExists,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function]),
    __metadata("design:returntype", void 0)
], QW_ACT_R34.prototype, "execute", null);
