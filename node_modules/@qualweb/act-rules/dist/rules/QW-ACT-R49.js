"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QW_ACT_R49 = void 0;
const applicability_1 = require("@qualweb/util/applicability");
const evaluation_1 = require("@qualweb/core/evaluation");
const AtomicRule_object_1 = require("../lib/AtomicRule.object");
class QW_ACT_R49 extends AtomicRule_object_1.AtomicRule {
    execute(element) {
        const test = new evaluation_1.Test();
        const autoplay = element.getElementProperty('autoplay') === "true";
        const paused = element.getElementAttribute('paused') === "true";
        const muted = element.getElementProperty('muted') === "true";
        const srcAttr = element.getElementAttribute('src');
        const childSrc = element.getElements('source[src]');
        const duration = parseInt(element.getElementProperty('duration'));
        const hasSoundTrack = window.DomUtils.videoElementHasAudio(element);
        const isAudioElement = element.getElementTagName() === 'audio';
        const hasPuppeteerApplicableData = duration > 3 && (hasSoundTrack || isAudioElement);
        const src = new Array();
        if (childSrc.length > 0) {
            for (const child of childSrc || []) {
                src.push(child.getElementAttribute('src'));
            }
        }
        else {
            src.push(srcAttr);
        }
        if (!(!autoplay || paused || muted || !hasPuppeteerApplicableData)) {
            if (this.srcTimeIsLessThanThree(src, duration)) {
                test.verdict = evaluation_1.Verdict.PASSED;
                test.resultCode = 'P1';
            }
            else {
                test.verdict = evaluation_1.Verdict.FAILED;
                test.resultCode = 'F1';
            }
        }
        else {
            test.verdict = evaluation_1.Verdict.INAPPLICABLE;
            test.resultCode = 'I1';
        }
        test.addElement(element);
        this.addTestResult(test);
    }
    srcTimeIsLessThanThree(src, duration) {
        let result = false;
        for (const child of src || []) {
            if (child) {
                const values = String(child).split('#t=');
                if (values.length > 1) {
                    const separatedValues = values[1].split(',');
                    const value1 = Number(separatedValues[0]);
                    const value2 = Number(separatedValues[1]);
                    if (value1 && value2) {
                        result = Math.abs(value1 - value2) <= 3;
                    }
                    else if (value1) {
                        result = Math.abs(duration - value1) <= 3;
                    }
                }
            }
        }
        return result;
    }
}
exports.QW_ACT_R49 = QW_ACT_R49;
__decorate([
    applicability_1.ElementExists,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function]),
    __metadata("design:returntype", void 0)
], QW_ACT_R49.prototype, "execute", null);
