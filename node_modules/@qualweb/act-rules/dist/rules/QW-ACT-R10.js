"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QW_ACT_R10 = void 0;
const applicability_1 = require("@qualweb/util/applicability");
const evaluation_1 = require("@qualweb/core/evaluation");
const AtomicRule_object_1 = require("../lib/AtomicRule.object");
class QW_ACT_R10 extends AtomicRule_object_1.AtomicRule {
    execute() {
        const iframes = window.qwPage.getElements('iframe');
        const accessibleNames = new Array();
        for (const link of iframes !== null && iframes !== void 0 ? iframes : []) {
            if (window.AccessibilityUtils.isElementInAT(link)) {
                const aName = window.AccessibilityUtils.getAccessibleName(link);
                if (aName) {
                    accessibleNames.push(aName);
                }
            }
        }
        let counter = 0;
        const blacklist = new Array();
        for (const accessibleName of accessibleNames !== null && accessibleNames !== void 0 ? accessibleNames : []) {
            const test = new evaluation_1.Test();
            const elements = new Array();
            if (blacklist.indexOf(counter) >= 0) {
            }
            else if (accessibleName && accessibleName.trim() !== '') {
                const hasEqualAn = this.isInListExceptIndex(accessibleName, accessibleNames, counter);
                if (hasEqualAn.length > 0) {
                    blacklist.push(...hasEqualAn);
                    hasEqualAn.push(counter);
                    for (const index of hasEqualAn !== null && hasEqualAn !== void 0 ? hasEqualAn : []) {
                        elements.push(iframes[index]);
                    }
                    const hashArray = this.getContentHash(elements);
                    const firstHash = hashArray.pop();
                    let result = true;
                    for (const hash of hashArray !== null && hashArray !== void 0 ? hashArray : []) {
                        if (!firstHash || !hashArray || hash !== firstHash) {
                            result = false;
                        }
                    }
                    if (result && hashArray.length !== 0) {
                        test.verdict = evaluation_1.Verdict.PASSED;
                        test.resultCode = 'P1';
                    }
                    else {
                        test.verdict = evaluation_1.Verdict.WARNING;
                        test.resultCode = 'F1';
                    }
                    test.addElements(elements);
                    this.addTestResult(test);
                }
            }
            counter++;
        }
    }
    getContentHash(elements) {
        const content = new Array();
        try {
            for (const element of elements !== null && elements !== void 0 ? elements : []) {
                const htmlContent = element.getContentFrame();
                if (htmlContent !== null && htmlContent.defaultView) {
                    content.push(htmlContent.documentElement.outerHTML);
                }
            }
        }
        catch (e) { }
        return content;
    }
    isInListExceptIndex(accessibleName, accessibleNames, index) {
        const result = new Array();
        let counter = 0;
        for (const accessibleNameToCompare of accessibleNames !== null && accessibleNames !== void 0 ? accessibleNames : []) {
            if (accessibleNameToCompare === accessibleName && counter !== index) {
                result.push(counter);
            }
            counter++;
        }
        return result;
    }
}
exports.QW_ACT_R10 = QW_ACT_R10;
__decorate([
    applicability_1.ElementExists,
    applicability_1.IsInMainContext,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], QW_ACT_R10.prototype, "execute", null);
