import type { Page, LaunchOptions, BrowserLaunchArgumentOptions, BrowserConnectOptions, Viewport } from 'puppeteer';
import 'colors';
import type { QualwebReport } from './lib/evaluation/QualwebReport';
import { PuppeteerLifeCycleEvent as LoadEvent } from 'puppeteer';
import { CrawlOptions } from '@qualweb/crawler';
import { QualwebPage, QualwebOptions, QualwebPlugin, PuppeteerPlugins, ClusterOptions } from './lib';
export declare class QualWeb {
    private cluster?;
    private readonly pluginManager;
    constructor(plugins?: PuppeteerPlugins);
    start(clusterOptions?: ClusterOptions, puppeteerOptions?: LaunchOptions & BrowserLaunchArgumentOptions & BrowserConnectOptions): Promise<void>;
    use(plugin: QualwebPlugin): this;
    stop(): Promise<void>;
    evaluate(options: QualwebOptions): Promise<Record<string, QualwebReport>>;
    private handlePageEvaluations;
    private addUrlsToEvaluate;
    private addHtmlCodeToEvaluate;
    crawl(domain: string, options?: CrawlOptions, viewport?: Viewport, waitUntil?: LoadEvent | LoadEvent[]): Promise<string[]>;
    private checkUrls;
    static createPage(page: Page): QualwebPage;
}
export declare function getFileParsedUrls(file: string): Promise<Array<string>>;
//# sourceMappingURL=qualweb.d.ts.map